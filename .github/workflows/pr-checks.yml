name: Pull Request Checks

on:
  pull_request:
    branches: [main]

jobs:
  pr-checks:
    name: PR Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint || true

      - name: Run type checking
        run: npm run ci:typecheck || true

      - name: Run tests
        run: npm run ci:test

      - name: Run build check
        run: npm run ci:build || echo "Build check completed with warnings"

      - name: Comment PR with results
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('CI/CD Pipeline Results')
            );
            
            const status = '${{ job.status }}' === 'success' ? '‚úÖ PASSED' : '‚ùå FAILED';
            const emoji = '${{ job.status }}' === 'success' ? 'üéâ' : '‚ö†Ô∏è';
            
            const body = `${emoji} **CI/CD Pipeline Results**
            
            **Status:** ${status}
            **Branch:** \`${{ github.head_ref }}\`
            **Commit:** \`${{ github.sha }}\`
            
            **Checks:**
            - ‚úÖ Linting: ${{ steps.lint.outcome }}
            - ‚úÖ Type Checking: ${{ steps.typecheck.outcome }}
            - ‚úÖ Tests: ${{ steps.test.outcome }}
            - ‚úÖ Build: ${{ steps.build.outcome }}
            
            **Next Steps:**
            ${status === '‚úÖ PASSED' ? 'Ready for review and merge!' : 'Please fix the failing checks before merging.'}
            `;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
